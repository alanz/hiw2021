#+Title: Exact Print Annotations in GHC (HIW 2021)
#+Author: Alan Zimmerman
#+Email: @alan_zimm

#+REVEAL_INIT_OPTIONS: width:1200, height:800, margin: 0.1, minScale:0.2, maxScale:2.5, slideNumber: 'c/t'
#+OPTIONS: num:nil toc:nil
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 2
#+REVEAL_TRANS: linear
#+REVEAL_PLUGINS: (markdown notes )
#+REVEAL_EXTRA_CSS: ./local.css
#+PROPERTY: header-args    :results silent
#+PROPERTY: header-args    :exports code

* Exact Print Annotations in GHC
:PROPERTIES:
:ID:       20210810T213954.542661
:END:

- Alan Zimmerman
- [[https://twitter.com/@alan_zimm][src_haskell{@alan_zimm}]]

#+begin_notes
If you recall I spoke last year about the plan to move the exact print
annotations and their processing into GHC. Today I report on the
results.

And the goal is to give a 10,000ft overview to
- Orient GHC developers / API users who wonder what on earth this is
- Give some pointers for previous users of ghc-exactprint as to what
  will have to change.
#+end_notes

* Exact Printing

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
0x01, 001, 0_01
#+end_src

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
{-# Language CPP #-}
{-# LANGUAGE CPP #-}
#+end_src

#+begin_notes
But first an overview of what exact printing is, and why it is
important for tooling.

As its name suggests, exact printing aims to reproduce exactly the
original source of a file parsed by GHC.

It does this by storing the exact original forms and locations of all
parts of the original.

Apart from the obvious things like keywords, comments and so on, basic
things like literals also need special treatment. <NEXT>

So the compiler captures a literal 1 for all three versions, but we
need to keep the original source.  <NEXT>

Even simple things like pragmas are case insensitive.
#+end_notes

** For Tooling

#+begin_src haskell
foo xxx = let a = 1
              b = 2
          in xxx + a + b
#+end_src

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
foo xxxlonger = let a = 1
                    b = 2
                in xxxlonger + a + b
#+end_src

#+begin_notes
Exact printing in GHC has a further goal though, to allow the parsed
AST to be modified, and then exact printed so that all the unchanged
parts remain exactly the same. This allows us to write tools to modify
code, e.g. adding a new import, without disturbing all the rest of the
file.

This is complicated by the fact that haskell is layout sensitive, so
special care must be taken when moving a piece of code from one place
to another where its indentation may change. <NEXT>
#+end_notes


* Changes (GHC 9.2)

#+ATTR_REVEAL: :frag (appear)
- The Exact Print Annotations are now in-tree
- src_haskell{ghc-exactprint} is still the library to programme against
- This has been updated heavily for use with GHC 9.2.1

#+begin_notes
Exact printing has been available for tool writers since GHC 7.10. <NEXT>

What is changing from GHC 9.2 is that the locations of the additional
items, trivia as they are called in Swift and Rust, are now captured
directly inside the GHC AST. <NEXT>

The ghc-exactprint library is still distributed via hackage, and is
still the one to programme against, if you used it before now.  <NEXT>

But it has been heavily updated, and as such gets a major version bump
(to 1.1) and loses backward compatibility.
#+end_notes

* src_haskell{ghc-exactprint} changes

#+ATTR_REVEAL: :frag (appear appear appear)
- Indirect tie-up of API Annotations is gone
- We no longer have a two-phased approach
- We no longer need to add default annotations

#+begin_notes
There are three main effects, from the perspective of tool writers <NEXT>

- The indirect tie-up of the API Annotations (as they was called before)
  via a SrcSpan and constructor name is gone, the information is now
  captured directly in the AST. <NEXT>

- We no longer have a two-phased approach, where the as-parsed
  annotations are massaged into their delta variants before they can
  be manipulated or printed. <NEXT>

- We no longer need to add default annotations, recent GHC is tested
  to be able to re-parse any pretty printed output back to the same
  AST.

There are a other incidental changes too, like the old concept of API
Annotations has now become Exact Print Annotations, and we have
tweaked some data structures.
#+end_notes

** Aside: AST

- src_haskell{Language.Haskell.Syntax}
- src_haskell{GHC.Hs}


#+ATTR_REVEAL: :frag appear
#+begin_src haskell
type ParsedSource = Located HsModule
#+end_src

#+begin_notes
One of the other changes coming in GHC 9.2 is an internal
restructuring of the modules making up GHC itself.

For our purposes, this means that the old GHC.Hs has been split into

- Language.Haskell.Syntax
- GHC.Hs

The first one is the completely general AST that can eventually be
used for e.g. TH, and does not specify the interpretation of the TTG
extension points.

Terminology: When I use the word AST, I am talking about the
ParsedSource which is defined in GHC.Hs,
and includes the GHC-specific interpretation of the TTG extension
points, which are used for the exact print annotations <NEXT>.

To be precise, ParsedSource, which is specialised on GhcPs
#+end_notes

** XRec

#+begin_src haskell
type LHsExpr p = XRec p (HsExpr p)
#+end_src

#+ATTR_REVEAL: :frag roll-in
#+begin_src haskell
type family XRec p a = r | r -> a
type instance XRec (GhcPass p) a = GenLocated (Anno a) a
type family Anno a = b
#+end_src

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
type instance Anno (HsExpr (GhcPass p)) = SrcSpanAnnA
#+end_src

#+begin_notes
Another thing you will notice about the new AST is that it is
littered with XRec types. <NEXT>

XRec is a type family where the p and a parameters determine r, and in
turn r determines a.

The instance for (GhcPass p) and a maps to GenLocated (Anno a) a.
Anno a is just a type family which maps an exact print annotation type
based on the type being annotated. And this is likely to change, given
that sometimes a given type needs a different annotation when it is
used in a different context. <NEXT>

So we have a particular kind of exact print annotation for the
location in LHsExpr GhcPs.

#+end_notes

** XRec example
Credit to Shayne Fletcher

#+begin_src haskell
  - LHsExpr GhcPs
  - XRec GhcPs (HsExpr GhcPs)
  - GenLocated (Anno (HsExpr GhcPs)) (HsExpr GhcPs)
  - GenLocated SrcSpanAnnA (HsExpr GhcPs)
  - LocatedA (HsExpr GhcPs))
#+end_src

#+ATTR_REVEAL: :frag appear
Expanding further we have
#+ATTR_REVEAL: :frag appear
#+begin_src haskell
- GenLocated SrcSpanAnnA (HsExpr GhcPs)
- GenLocated (SrcAnn AnnListItem) (HsExpr GhcPs)
- GenLocated (SrcSpanAnn' (EpAnn AnnListItem)) (HsExpr GhcPs)
#+end_src


#+begin_notes
This machinery for going from an XRec declaration to the actual
annotation to be used is very awkward to use in practice, especially
since the split into Language.Haskell.Syntax and GHC.Hs means the XRec
definitions occur in one branch of the source tree and their
resolutions in another, and not always in an easily searchable way, as
the type family resolves on the expanded synonym form.

To see how this works, consider what that means for the located
expression type LHsExpr GhcPs in GHC. <NEXT>

Going into insane detail we have this, presented without comment
#+end_notes

* GHC Dev Survival Guide

All is not lost.

#+ATTR_REVEAL: :frag appear
src_haskell{A} is your friend


#+ATTR_REVEAL: :frag appear
#+begin_src haskell
type instance Anno (HsExpr (GhcPass p)) = SrcSpanAnnA
type LocatedA = GenLocated SrcSpanAnnA
#+end_src

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
  Located    => LocatedA
  getLoc     => getLocA
  noLoc      => noLocA
  locA -- get SrcSpan from GenLocated payload
  setSrcSpan => setSrcSpanA
  addLocM    => addLocMA
#+end_src

#+begin_notes
All is not lost. <NEXT>

A is your friend. <NEXT>

The most common annotation type is the one shown for LHsExpr earlier,
which is used for items appearing sequentially. The annotation tracks
the basic bookkeeping of entry location and comments, as well as any
trailing trivia based on being in a list, such as commas, semi-colons,
and so on. We give it a type synonym ending in A, <NEXT>

So in code you simply replace the normal variants of helper functions
with ones have an A at the end.
#+end_notes

** Changes: ghc-exactprint types

#+begin_src haskell
data Annotation = Ann -- old ghc-exactprint type
  {
    -- interfacing up into the AST
    annEntryDelta      :: !DeltaPos
  , annPriorComments   :: ![(Comment,  DeltaPos)]
  , annFollowingComments   :: ![(Comment,  DeltaPos)]
  -- interfacing down into the AST
  , annsDP             :: ![(KeywordId, DeltaPos)]
  , annSortKey         :: !(Maybe [GHC.RealSrcSpan])
  }
#+end_src

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
data EpAnn ann
  = EpAnn { entry   :: Anchor
          , anns     :: ann
          , comments :: EpAnnComments
          }
  | EpAnnNotUsed
#+end_src

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
data Anchor = Anchor { anchor :: RealSrcSpan
                     , anchor_op :: AnchorOperation }
data AnchorOperation = UnchangedAnchor
                     | MovedAnchor DeltaPos
#+end_src

#+begin_notes
In prior ghc-exactprint we had the output of the delta phase give us
an Annotation type.

This is linked to the AST item it documents by a combination
of the SrcSpan of the item and the constructor name.

Here the annEntryDelta defines where this piece of AST fits in
relative to any prior pieces, the comments are split into ones before
the entry point and after, but still within the span of the given AST
element.

The annsDP is the location of the trivia fields indexed by KeywordId. <NEXT>

The Exact Print Annotations mirror this, <NEXT>
But the Anchor is more flexible
#+end_notes

#+REVEAL: split
#+begin_src haskell
newtype DeltaPos = DP (Int,Int)
#+end_src

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
data DeltaPos
  = SameLine { deltaColumn :: !Int }
  | DifferentLine
      { deltaLine   :: !Int, -- ^ deltaLine should always be > 0
        deltaColumn :: !Int
      }
#+end_src

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
data EpaLocation = EpaSpan RealSrcSpan
                 | EpaDelta DeltaPos
#+end_src

#+begin_notes
Another highly visible change is the DeltaPos type has become more meaningful.  <NEXT>

And is mostly wrapped in an EpaLocation  <NEXT>

Which is how we get rid of the delta phase. The parser gives us
absolute locations, but we are able to insert delta ones strategically
if we change anything.

The actual printing step changes the absolutes into deltas immediately
prior to output, so moving an entire tree only needs an adjustment to
the topmost element.
#+end_notes

** Annotation

#+begin_src haskell
  | HsLet (XLet p)
          (HsLocalBinds p)
          (LHsExpr  p)
#+end_src

#+begin_src haskell
type instance XLet GhcPs = EpAnn AnnsLet
data AnnsLet = AnnsLet { alLet :: EpaLocation,
                         alIn  :: EpaLocation }
#+end_src

#+begin_notes
Here we give you a flavour of the new annotations in use.

The XLet extension point for HsLet is mapped onto a standard
exactprint annotation specialised to the AnnsLet data structure.

This structure explicitly tracks the locations of the "let" and "in"
keywords.
#+end_notes



* Code Modifications

#+begin_src haskell
doAddLocal = do
  (d1:d2:d3) <- hsDecls lp
  balanceComments d1 d2
  (d1',_) <- modifyValD (getLoc d1) d1 $ \_m d -> do
    return ((newDecl : d),Nothing)
  replaceDecls lp [d1', d2, d3]
#+end_src

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
doAddLocal = do
  (de1:d2:d3:_) <- hsDecls lp
  (de1'',d2') <- balanceComments de1 d2
  (de1',_) <- modifyValD (getLocA de1'') de1'' $ \_m d -> do
    return ((wrapDecl decl' : d),Nothing)
  replaceDecls lp [de1', d2', d3]
#+end_src

#+begin_notes
A quick look at how changing ASTs with the ghc-exactprint Transform
module is affected.  Here we see an operation to add a newDecl to the
local binds of the first declaration in a file.

The modifyValD provides a way to work with the individual Match's of a
FunBind, based on the location of the one we care about, and gives us
a list of local declarations to work with.  <NEXT>

The new version is very similar, except the annotations are not
updated in the Transform monad, so the various functions return
updated AST fragments for further processing.

And we have a helper function d1 that returns a one-space DeltaPos, so
we had to rename the variable.
#+end_notes

* Summary

#+ATTR_REVEAL: :frag (appear)
- The API Annotations have become Exact Print Annotations
- And have moved into the GHC source tree as first class citizens
- This has some benefits
  - We have tests of actual usage
  - All the pieces are in one repository
- The major benefit is it now allows incremental improvement, and
  removal of rough edges.

* The work is incomplete, changes to come (master)

https://gitlab.haskell.org/ghc/ghc/-/issues/20039

* Resources

https://gitlab.haskell.org/ghc/ghc/-/wikis/api-annotations
https://github.com/alanz/ghc-exactprint/tree/ghc-9.2
https://blog.shaynefletcher.org/2021/05/annotations-in-ghc.html
