#+Title: Exact Print Annotations in GHC (HIW 2021)
#+Author: Alan Zimmerman
#+Email: @alan_zimm

#+REVEAL_INIT_OPTIONS: width:1200, height:800, margin: 0.1, minScale:0.2, maxScale:2.5, slideNumber: 'c/t'
#+OPTIONS: num:nil toc:nil
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 2
#+REVEAL_TRANS: linear
#+REVEAL_PLUGINS: (markdown notes )
#+REVEAL_EXTRA_CSS: ./local.css
#+PROPERTY: header-args    :results silent
#+PROPERTY: header-args    :exports code

* Exact Print Annotations in GHC
:PROPERTIES:
:ID:       20210810T213954.542661
:END:

- Alan Zimmerman
- [[https://twitter.com/@alan_zimm][src_haskell{@alan_zimm}]]

#+begin_notes
If you recall I spoke last year at HIW, about the plan to move the
exact print annotations and their processing into GHC. Today I will
report on the results of that effort.
#+end_notes

* Overview

** Exact Printing

#+ATTR_REVEAL: :frag appear
So if you write src_haskell{0x01}, GHC represents this as an integral 1, but also
stores the original string.

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
{-# Language CPP #-}
#+end_src

#+begin_notes
But first an overview of what exact printing is, and why it is
important for tooling.

As its name suggests, exact printing aims to reproduce exactly the
original source of a file parsed by GHC.

It does this by storing the exact original forms and locations of all
parts of the original.
#+end_notes

** For Tooling

#+begin_src haskell
foo xxx = let a = 1
              b = 2
          in xxx + a + b
#+end_src

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
foo xxxlonger = let a = 1
                    b = 2
                in xxxlonger + a + b
#+end_src

#+begin_notes
Exact printing in GHC has a further goal though, to allow the parsed
AST to be modified, and then exact printed so that all the unchanged
parts remain exactly the same. This allows us to write tools to modify
code, e.g. adding a new import, without disturbing all the rest of the
file.

This is complicated by the fact that haskell is layout sensitive, so
special care must be taken when moving a piece of code from one place
to another where its indentation may change.

One feature in recent GHCs is that we explicitly test that we get the
same AST back if we parse the GHC pretty print output.  We will not
get the same layout, but it means a freshly-constructed (by tooling)
piece of AST can be inserted with high confidence that the rendered
source will represent what we want.
#+end_notes

* src_haskell{ghc-exactprint => GHC Exactprint}

#+ATTR_REVEAL: :frag appear
This has three main effects

#+ATTR_REVEAL: :frag (appear appear appear)
- Indirect tie-up of API Annotations is gone
- We no longer have a two-phased approach
- We no longer need to add default annotations

#+begin_notes
This track is HIW, so I am going to talk about the implementation of
the exact printing feature, and in particular

Exact printing has been available for tool writers since GHC 7.10.

What is changing from GHC 9.2 is that the locations of the additional
items, trivia as they are called in Swift and Rust, are now captured
more directly inside the GHC AST.

This has three main effects, from the perspective of tool writers

- The indirect tie-up of the API Annotations (as they was called before)
  via a SrcSpan and constructor name is gone, the information is now
  captured directly in the AST.

- We no longer have a two-phased approach, where the as-parsed
  annotations are massaged into their delta variants before they can
  be manipulated or printed.

- We no longer need to add default annotations

There are a other incidental changes too, like the old concept of API
Annotations has now become Exact Print Annotations, and we have a lot
more data structures.
#+end_notes

* Changes (GHC 9.2)

- The Exact Print Annotations are now in-tree
- src_haskell{ghc-exactprint} is still the library to programme against
- This has been updated heavily for use with GHC 9.2.1

#+begin_notes
I am going to talk about the changes from the perspective of a person
using ghc-exactprint.

You still have the same operational behaviour, e.g. changing the name
of an identifier to have a different length will adjust the layout to
keep the programme valid.
#+end_notes

** Aside: AST

- src_haskell{Language.Haskell.Syntax}
- src_haskell{GHC.Hs}

#+begin_notes
One of the other changes coming in GHC 9.2 is an internal
restructuring of the modules making up GHC itself.

For our purposes, this means that the old GHC.Hs has been split into

- Language.Haskell.Syntax
- GHC.Hs

The first one is the completely general AST that can eventually be
used for e.g. TH, and does not specify the interpretation of the TTG
extension points.

Terminology: When I use the word AST, I am talking about the
src_haskell{ParsedSource} which is defined in GHC.Hs,
and includes the GHC-specific interpretation of the TTG extension
points, which are used for the exact print annotations.
#+end_notes

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
type ParsedSource = Located HsModule
#+end_src

** XRec

#+ATTR_REVEAL: :frag appear
#+begin_src haskell
type LHsExpr p = XRec p (HsExpr p)
#+end_src

#+ATTR_REVEAL: :frag roll-in
#+begin_src haskell
type family XRec p a = r | r -> a
type instance XRec (GhcPass p) a = GenLocated (Anno a) a
type family Anno a = b
#+end_src

#+begin_notes
The first thing you will notice about the new AST is that it is
littered with XRec types.

So, XRec is a type family where the p and a parameters
determine r, and in turn r determines a.

The instance for (GhcPass p) and a maps to GenLocated (Anno a) a.
Anno a is just a type family which maps an exact print annotation type
based on the type being annotated. And this is likely to change, given
that sometimes a given type needs a different annotation when it is
used in a different context.

This machinery for going from an XRec declaration to the actual
annotation to be used is very awkward to use in practice, especially
since the split into Language.Haskell.Syntax and GHC.Hs means the XRec
definitions occur in one branch of the source tree and their
resolutions in another, and not always in an easily searchable way, as
the type family resolves on the expanded synonym form.
#+end_notes

** XRec example
Credit to Shayne Fletcher

Specific choices for each syntatic element can then be made for GHCâ€™s
use of the parse tree and phase. For example, in GHC.Hs.Expr we have
the following.

#+begin_src haskell
type LHsExpr p = XRec p (HsExpr p)
type instance Anno (HsExpr (GhcPass pass)) = SrcSpanAnnA
#+end_src

To see how this works, consider what that means for the located
expression type LHsExpr GhcPs in GHC.

#+begin_src haskell
  - LHsExpr GhcPs
  - XRec GhcPs (HsExpr GhcPs)
  - GenLocated (Anno (HsExpr GhcPs)) (HsExpr GhcPs)
  - GenLocated SrcSpanAnnA (HsExpr GhcPs)
  - LocatedA (HsExpr GhcPs))
#+end_src

Expanding further we have

#+begin_src haskell
- GenLocated SrcSpanAnnA (HsExpr GhcPs)
- GenLocated (SrcAnn AnnListItem) (HsExpr GhcPs)
- GenLocated (SrcSpanAnn' (EpAnn AnnListItem)) (HsExpr GhcPs)
#+end_src

** Changes

Basic structure


* Summary

- The API Annotations have become Exact Print Annotations
- And have moved into the GHC source tree as first class citizens
- This has some benefits
  - We have tests with actual usage so that GHC developers can be more
    confident they have not broken something when they make changes.
  - All the pieces are in one repository, so it is easier to (try to)
    understand the whole thing.
- The major benefit is it now allows incremental improvement, and
  removal of rough edges.

* The work is incomplete, changes to come (master)

https://gitlab.haskell.org/ghc/ghc/-/issues/20039

* Resources

https://gitlab.haskell.org/ghc/ghc/-/wikis/api-annotations
https://github.com/alanz/ghc-exactprint/tree/ghc-9.2
https://blog.shaynefletcher.org/2021/05/annotations-in-ghc.html
